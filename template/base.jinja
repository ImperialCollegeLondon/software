FROM {{ FROM }}

ARG GIT_SHA
ARG GIT_BRANCH
ARG CONFIGURATION
ARG TAG

ENV GLOTZERLAB_SOFTWARE_GIT_SHA=${GIT_SHA} \
    GLOTZERLAB_SOFTWARE_GIT_BRANCH=${GIT_BRANCH} \
    GLOTZERLAB_SOFTWARE_CONFIGURATION=${CONFIGURATION} \
    GLOTZERLAB_SOFTWARE_TAG=${TAG}

ARG DEBIAN_FRONTEND=noninteractive

{% if ubuntu_version == 18 %}
RUN apt-get update && apt-get install -y --no-install-recommends \
  clang-7 \
  cmake \
  curl \
  ffmpeg \
  git \
  hwloc \
  libboost-dev \
  libcereal-dev \
  libedit-dev \
  libeigen3-dev \
  libevent-dev \
  libhwloc-dev \
  libtbb-dev \
  libsqlite3-dev \
  llvm-7-dev \
  python3.8 \
  python3.8-dev \
  python3.8-venv \
  python3.8-distutils \
  zlib1g-dev \
  ca-certificates \
  && rm -rf /var/lib/apt/lists/*


# put clang on the path
ENV PATH=$PATH:/usr/lib/llvm-7/bin
{% endif %}

# Link python3.8 to python3 in user path
RUN rm -f /usr/bin/python3 && ln -s "$(which python3.8)" /usr/bin/python3

# prevent python from loading packages from outside the container
# default empty pythonpath
ENV PYTHONPATH=/ignore/pythonpath
# disable user site directories (https://docs.python.org/3/library/site.html#module-site)
RUN sed -i -e 's/ENABLE_USER_SITE = None/ENABLE_USER_SITE = False/g' `python3 -c 'import site; print(site.__file__)'`

# embree
ENV CPATH=/opt/embree-{{ EMBREE_VERSION }}.x86_64.linux/include:$CPATH \
    LIBRARY_PATH=/opt/embree-{{ EMBREE_VERSION }}.x86_64.linux/lib:$LIBRARY_PATH \
    LD_LIBRARY_PATH=/opt/embree-{{ EMBREE_VERSION }}.x86_64.linux/lib:$LD_LIBRARY_PATH \
    EMBREE3_LINK=/opt/embree-{{ EMBREE_VERSION }}.x86_64.linux/lib

RUN curl -sSLO https://github.com/embree/embree/releases/download/v{{ EMBREE_VERSION }}/embree-{{ EMBREE_VERSION }}.x86_64.linux.tar.gz \
    && tar -xzf embree-{{ EMBREE_VERSION }}.x86_64.linux.tar.gz -C /opt \
    && rm -rf /opt/embree-{{ EMBREE_VERSION }}.x86_64.linux/bin \
    && rm -rf /opt/embree-{{ EMBREE_VERSION }}.x86_64.linux/doc \
    && rm embree-{{ EMBREE_VERSION }}.x86_64.linux.tar.gz

# install pybind11 headers
RUN curl -SL https://github.com/pybind/pybind11/archive/v{{PYBIND11_VERSION}}.tar.gz | tar -xzC /root && \
    cd /root/pybind11-{{PYBIND11_VERSION}} && \
    mkdir build && cd build && \
    cmake ../ -DCMAKE_INSTALL_PREFIX=/usr -DPYBIND11_TEST=off && \
    make install && \
    cd / && rm -rf /root/pybind11-*

# ubuntu qhull doesn't provide qhullcpp, build it by hand
RUN curl -SL https://github.com/qhull/qhull/archive/{{QHULL_VERSION}}.tar.gz | tar -xzC /root && \
    cd /root/qhull-{{QHULL_VERSION}} && \
    mkdir build2 && cd build2 && \
    cmake ../ -DCMAKE_INSTALL_PREFIX=/usr -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-fPIC -DCMAKE_C_FLAGS=-fPIC && \
    make install -j {{ MAKEJOBS }} && \
    cd / && rm -rf /root/qhull-*

# mount points for filesystems on clusters
RUN mkdir -p /nfs \
    mkdir -p /oasis \
    mkdir -p /scratch \
    mkdir -p /work \
    mkdir -p /projects \
    mkdir -p /home1

# make a python virtual environment to install packages into
# many pip installable packages clobber scripts that ubuntu provides in bin/ and result
# in broken packages
ENV PATH=/opt/glotzerlab/bin:$PATH \
    CMAKE_PREFIX_PATH=/opt/glotzerlab/bin

RUN python3 -m venv /opt/glotzerlab \
    && /opt/glotzerlab/bin/python3 -m pip install --no-cache-dir --upgrade pip

# Install the requirements files
COPY requirements*.txt /
